#!/usr/bin/env xcrun swift

// https://projecteuler.net/problem=12
// 
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle 
// number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// 
// We can see that 28 is the first triangle number to have over five divisors.
// 
// What is the value of the first triangle number to have over five hundred divisors?

var triangleNumbers = [Int]()
func getTriangleNumber(index: Int) -> Int {
  if triangleNumbers.count <= index {
    if index == 0 {
      triangleNumbers.append(1)
    } else {
      let previousTriangle = getTriangleNumber(index - 1)
      triangleNumbers.append(previousTriangle + index + 1)
    }
  }

  return triangleNumbers[index]
}

func primeFactorization(value: Int) -> [Int] {
  var factors = [Int]()
  var divisor = 2
  var input = value

  while input > 1 {
    while input % divisor == 0 {
      factors.append(divisor)
      input /= divisor
    }
    divisor += 1
  }

  return factors
}

var index = 0
var factors = [Int]()

while factors.count < 500 {
  let triangleNumber = getTriangleNumber(index)
  factors = primeFactorization(triangleNumber)
  
  if (index % 1000 == 0) { print("\(index): \(factors.count) \(factors)") }

  index++
}

print(index)
